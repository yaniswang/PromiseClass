{"name":"Promiseclass","tagline":"Create chain Promise Class","body":"PromiseClass\r\n=======================\r\n\r\n![PromiseClass logo](https://raw.github.com/yaniswang/PromiseClass/master/logo.png)\r\n\r\nCreate your own chain Promise Class easily.\r\n\r\n[![Build Status](https://img.shields.io/travis/yaniswang/PromiseClass.svg)](https://travis-ci.org/yaniswang/PromiseClass)\r\n[![Coverage Status](https://img.shields.io/coveralls/yaniswang/PromiseClass.svg)](https://coveralls.io/github/yaniswang/PromiseClass?branch=master)\r\n[![NPM version](https://img.shields.io/npm/v/promiseclass.svg?style=flat)](https://www.npmjs.com/package/promiseclass)\r\n[![License](https://img.shields.io/npm/l/promiseclass.svg?style=flat)](https://www.npmjs.com/package/promiseclass)\r\n[![NPM count](https://img.shields.io/npm/dm/promiseclass.svg?style=flat)](https://www.npmjs.com/package/promiseclass)\r\n[![NPM count](https://img.shields.io/npm/dt/promiseclass.svg?style=flat)](https://www.npmjs.com/package/promiseclass)\r\n\r\nFeatures\r\n======================\r\n\r\n1. All method will warp to chain Promise\r\n2. Support constructor define\r\n3. Support property define\r\n4. Support sync & async method define\r\n5. Support addMethod & addPropertie after class define\r\n6. Support generator & ES7 await\r\n7. Support async callback & promise & generator mix use\r\n8. Supoort define generator method, and promise callback support generator function\r\n\r\nQuick start\r\n======================\r\n\r\nTry it:\r\n\r\n    var PromiseClass = require('promiseclass');\r\n    var co = require('co');\r\n\r\n    var App = PromiseClass.create({\r\n\r\n        constructor(str){\r\n            console.log('constructor:',str);\r\n        },\r\n\r\n        syncMethod(n){\r\n            console.log('syncMethod called : '+n);\r\n            return 'syncMethod return : '+n;\r\n        },\r\n\r\n        asyncMethod1(n, done){\r\n            console.log('asyncMethod1 called : '+n);\r\n            this.asyncMethod2(n).then(function(){\r\n                console.log('asyncMethod1 done : '+n);\r\n                done(null, 'asyncMethod1 return : '+n);\r\n            }).catch(done);\r\n        },\r\n\r\n        asyncMethod2(n, done){\r\n            console.log('asyncMethod2 called : '+n);\r\n            setTimeout(function(){\r\n                console.log('asyncMethod2 done : '+n);\r\n                done(null, 'asyncMethod2 return : '+n);\r\n            }, n);\r\n        },\r\n\r\n        *generatorMethod1(n){\r\n            console.log('generatorMethod1 called : '+n);\r\n            return yield this.asyncMethod2(n);\r\n        },\r\n\r\n        propertie1: 1,\r\n        propertie2: 2\r\n\r\n    });\r\n\r\n    // add async method\r\n    App.addMethod('asyncMethod3', function(n, done){\r\n        console.log('asyncMethod3 called : '+n);\r\n        setTimeout(function(){\r\n            console.log('asyncMethod3 done : '+n);\r\n            done(null, 'asyncMethod3 return : '+ n);\r\n        }, n);\r\n    });\r\n    // add generator method\r\n    App.addMethod('generatorMethod2', function*(n){\r\n        console.log('generatorMethod2 called : '+n);\r\n        return yield this.asyncMethod2(n);\r\n    });\r\n    // add propertie\r\n    App.addPropertie('propertie3', 3);\r\n\r\n    // async callback\r\n    function async(){\r\n        console.log('================ async start ================');\r\n        var deferred = Promise.defer();\r\n        var app = new App('async');\r\n        app.syncMethod(0, function(error, ret){\r\n            console.log(ret);\r\n            console.log('--------------------------');\r\n            app.asyncMethod1(1, function(error, ret){\r\n                console.log(ret);\r\n                console.log('================ async end ================');\r\n                console.log('');\r\n                deferred.resolve();\r\n            });\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    // promise\r\n    function promise(){\r\n        console.log('================ promise start ================');\r\n        var deferred = Promise.defer();\r\n        var app = new App('promise');\r\n        app.syncMethod(0).then(function(ret){\r\n            console.log(ret);\r\n            console.log('--------------------------');\r\n        }).asyncMethod1(1).then(function(ret){\r\n            console.log(ret);\r\n            console.log('--------------------------');\r\n        }).asyncMethod2(2).then(function(ret){\r\n            console.log(ret);\r\n            console.log('--------------------------');\r\n        }).asyncMethod3(3).then(function(ret){\r\n            console.log(ret);\r\n            console.log('================ promise end ================');\r\n            console.log('');\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    // generator\r\n    function generator(){\r\n        console.log('================ generator start ================');\r\n        var deferred = Promise.defer();\r\n        co(function *(){\r\n            var app = new App('generator');\r\n            yield app.syncMethod(0).then(function(ret){\r\n                console.log(ret);\r\n            });\r\n            console.log('--------------------------');\r\n            yield app.asyncMethod1(1).then(function(ret){\r\n                console.log(ret);\r\n            });\r\n            console.log('--------------------------');\r\n            yield app.asyncMethod2(2).then(function(ret){\r\n                console.log(ret);\r\n            });\r\n            console.log('--------------------------');\r\n            yield app.asyncMethod3(3).then(function(ret){\r\n                console.log(ret);\r\n            });\r\n            console.log('--------------------------');\r\n            yield app.generatorMethod1(4).then(function*(ret){\r\n                console.log(ret);\r\n                return yield this.asyncMethod1(5);\r\n            }).then(function(ret){\r\n                console.log(ret);\r\n            });\r\n        }).then(function(){\r\n            console.log('done!');\r\n            console.log('================ generator end ================');\r\n            console.log('');\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    async().then(function(){\r\n        return promise();\r\n    }).then(function(){\r\n        return generator();\r\n    });\r\n\r\n\r\n\r\n\r\nLicense\r\n================\r\n\r\nPromiseClass is released under the MIT license:\r\n\r\n> The MIT License\r\n>\r\n> Copyright (c) 2015 Yanis Wang \\< yanis.wang@gmail.com \\>\r\n>\r\n> Permission is hereby granted, free of charge, to any person obtaining a copy\r\n> of this software and associated documentation files (the \"Software\"), to deal\r\n> in the Software without restriction, including without limitation the rights\r\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n> copies of the Software, and to permit persons to whom the Software is\r\n> furnished to do so, subject to the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be included in\r\n> all copies or substantial portions of the Software.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n> THE SOFTWARE.\r\n\r\nThanks\r\n================\r\n\r\n* mocha: [https://github.com/visionmedia/mocha](https://github.com/visionmedia/mocha)\r\n* expect.js: [https://github.com/LearnBoost/expect.js](https://github.com/LearnBoost/expect.js)\r\n* istanbul: [https://github.com/gotwarlost/istanbul](https://github.com/gotwarlost/istanbul)\r\n* Grunt: [http://gruntjs.com/](http://gruntjs.com/)\r\n* jshint: [https://github.com/jshint/jshint](https://github.com/jshint/jshint)\r\n* GitHub: [https://github.com/](https://github.com/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}